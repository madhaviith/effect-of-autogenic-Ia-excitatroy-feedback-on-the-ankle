//Generated file
{xopen("tools.hoc")}
public soma
create soma[1]
public nsoma
public axon
create axon[1]
public naxon
public dend
create dend[1]
public ndend
public nclist, synlist
objectvar nclist, synlist
public x, y, z
public position
public connect2target
public synapse


//init function
proc init() {localobj r,rmechanism,soma_start_list,soma_start,soma_end_list,soma_end,axon_start_list,axon_start,axon_end_list,axon_end,dend_start_list,dend_start,dend_end_list,dend_end
r=new Random(neuroid_random())
rmechanism=new Vector(2)
x = y = z = 0
nclist = new List()
synlist = new List()
nsoma=1
create soma[nsoma]
soma_start_list = new List()
soma_start = new Vector(4)
soma_start.x[0] = -12.5
soma_start.x[1] = 0
soma_start.x[2] = 0
soma_start.x[3] = 25.0
soma_start_list.append(soma_start)
soma_end_list = new List()
soma_end = new Vector(4)
soma_end.x[0] = 12.5
soma_end.x[1] = 0
soma_end.x[2] = 0
soma_end.x[3] = 25.0
soma_end_list.append(soma_end)
mechanism_range("soma","nahh",rmechanism)
soma_nahh_start = rmechanism.x[0]
soma_nahh_end = rmechanism.x[1]
mechanism_range("soma","borgkdr",rmechanism)
soma_borgkdr_start = rmechanism.x[0]
soma_borgkdr_end = rmechanism.x[1]
mechanism_range("soma","iM",rmechanism)
soma_iM_start = rmechanism.x[0]
soma_iM_end = rmechanism.x[1]
mechanism_range("soma","pas",rmechanism)
soma_pas_start = rmechanism.x[0]
soma_pas_end = rmechanism.x[1]
for i=0,nsoma-1 {
soma[i] {
  if ((i>=soma_nahh_start*nsoma) && (i<soma_nahh_end*nsoma)) {
    insert nahh
  }
  if ((i>=soma_borgkdr_start*nsoma) && (i<soma_borgkdr_end*nsoma)) {
    insert borgkdr
  }
  if ((i>=soma_iM_start*nsoma) && (i<soma_iM_end*nsoma)) {
    insert iM
    vshift_iM=-5
  }
  if ((i>=soma_pas_start*nsoma) && (i<soma_pas_end*nsoma)) {
    insert pas
  }
  nseg=1
  diam=25.0
  L=25.0
  pt3dclear() pt3dadd(soma_start_list.o(i).x[0],soma_start_list.o(i).x[1],soma_start_list.o(i).x[2],soma_start_list.o(i).x[3])  pt3dadd(soma_end_list.o(i).x[0],soma_end_list.o(i).x[1],soma_end_list.o(i).x[2],soma_end_list.o(i).x[3]) 
}
}
naxon=1
create axon[naxon]
axon_start_list = new List()
axon_start = new Vector(4)
axon_start.x[0] = 12.5
axon_start.x[1] = 0
axon_start.x[2] = 0
axon_start.x[3] = 3.18
axon_start_list.append(axon_start)
axon_end_list = new List()
axon_end = new Vector(4)
axon_end.x[0] = 1012.5
axon_end.x[1] = 0
axon_end.x[2] = 0
axon_end.x[3] = 3.18
axon_end_list.append(axon_end)
for i=0,naxon-1 {
axon[i] {
  nseg=1
  diam=3.18
  L=1000.0
  pt3dclear() pt3dadd(axon_start_list.o(i).x[0],axon_start_list.o(i).x[1],axon_start_list.o(i).x[2],axon_start_list.o(i).x[3])  pt3dadd(axon_end_list.o(i).x[0],axon_end_list.o(i).x[1],axon_end_list.o(i).x[2],axon_end_list.o(i).x[3]) 
}
}
ndend=1
create dend[ndend]
dend_start_list = new List()
dend_start = new Vector(4)
dend_start.x[0] = -12.5
dend_start.x[1] = 0
dend_start.x[2] = 0
dend_start.x[3] = 10.0
dend_start_list.append(dend_start)
dend_end_list = new List()
dend_end = new Vector(4)
dend_end.x[0] = -1012.5
dend_end.x[1] = 0
dend_end.x[2] = 0
dend_end.x[3] = 10.0
dend_end_list.append(dend_end)
mechanism_range("dend","pas",rmechanism)
dend_pas_start = rmechanism.x[0]
dend_pas_end = rmechanism.x[1]
for i=0,ndend-1 {
dend[i] {
  if ((i>=dend_pas_start*ndend) && (i<dend_pas_end*ndend)) {
    insert pas
  }
  nseg=1
  diam=10.0
  Ra=135.0
  L=1000.0
  pt3dclear() pt3dadd(dend_start_list.o(i).x[0],dend_start_list.o(i).x[1],dend_start_list.o(i).x[2],dend_start_list.o(i).x[3])  pt3dadd(dend_end_list.o(i).x[0],dend_end_list.o(i).x[1],dend_end_list.o(i).x[2],dend_end_list.o(i).x[3]) 
}
}
connect dend[0](0.0), soma[0](0.0)
connect axon[0](0.0), soma[0](1.0)
}


//position function
proc position() {
    soma for i = 0, n3d()-1 {
        pt3dchange(i, $1-x+x3d(i), $2-y+y3d(i), $3-z+z3d(i), diam3d(i))
    }
    axon for i = 0, n3d()-1 {
        pt3dchange(i, $1-x+x3d(i), $2-y+y3d(i), $3-z+z3d(i), diam3d(i))
    }
    dend for i = 0, n3d()-1 {
        pt3dchange(i, $1-x+x3d(i), $2-y+y3d(i), $3-z+z3d(i), diam3d(i))
    }
    x = $1 y = $2 z = $3
}


//connect2target function
obfunc connect2target() {localobj nc
  axon[naxon-1] nc = new NetCon(&v(1), $o1)
  nc.threshold = -20
  nc.delay = 1
  nc.weight = 0.5
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}


//synapse function
obfunc synapse() {localobj syn
  nsoma = 1
  naxon = 1
  ndend = 1
  if(strcmp($s1,"GLU") == 0) {
    soma[int(0)] syn = new GLU(0.5)
  } else if(strcmp($s1,"GABA") == 0) {
    soma[int(0)] syn = new GABA(0.5)
  }
  synlist.append(syn)
  return syn
}


func poisson_index(){localobj r
  a=0
  r=new Random(neuroid_random())
  temp=r.poisson($1)
  for j=1,5{
    temp = r.repick()
    a+=temp
  }
  a = int(a/5)-2
  if (a<$2) {a=$2}
  if (a>$3) {a=$3}
  return a
}


func uniform_position() {localobj r
  r=new Random(neuroid_random())
  b=r.uniform(0,1)
  return b
}


proc mechanism_range() {localobj rvec,f
  rvec = $o3
  rvec.x[0] = 0.0
  rvec.x[1] = 1.0
  strdef segm,mech
  f = new File()
  f.ropen("AfferentCell.dat")
  if (!f.isopen()){
    return
  }
  while (!f.eof()) {
    f.scanstr(segm)
    f.scanstr(mech)
    if ((strcmp(segm,$s1) == 0) && (strcmp(mech,$s2) == 0)){
        rvec.x[0] = f.scanvar()
        rvec.x[1] = f.scanvar()
    } else {
        f.gets(segm)
    }
  }
  f.close()
}


